<?php
// auto-generated by sfPropelCrud
// date: 2009/02/12 21:10:23
?>
<?php

/**
 * printconfiguration actions.
 *
 * @package    sf_sandbox
 * @subpackage printconfiguration
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class printconfigurationActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('printconfiguration', 'list');
  }

  public function executeList()
  {
    $this->print_configurations = PrintConfigurationPeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
    $this->print_configuration = PrintConfigurationPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->print_configuration);
  }

  public function executeCreate()
  {
    $this->print_configuration = new PrintConfiguration();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $user = $this->getUser()->getProfile();
    $this->print_configuration = PrintConfigurationPeer::getLatestByAccountId($user->getAccountId());
    if ($this->print_configuration == null) {
      $this->print_configuration = PrintConfiguration::getDefaultConfiguration();
    }
    $this->forwardUnless($this->print_configuration, 'printconfiguration', 'create');

    $this->watermark_images = WatermarkImagePeer::findByAccountId($user->getAccountId());
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $print_configuration = new PrintConfiguration();
    }
    else
    {
      $print_configuration = PrintConfigurationPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($print_configuration);
    }

    $user = $this->getUser()->getProfile();
    $print_configuration->setAccountId($user->getAccountId());
    $print_configuration->setFields($this->getRequest());
    $print_configuration->save();

    return $this->redirect('@printpage');
  }

  public function handleErrorUpdate()
  {
    $this->forward('printconfiguration', 'edit');
  }

  public function executeDelete()
  {
    $print_configuration = PrintConfigurationPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($print_configuration);

    $print_configuration->delete();

    return $this->redirect('printconfiguration/list');
  }

  public function executeGeneratePreview()
  {
    $response = array('success'=>false);
    $account_id = $this->getUser()->getProfile()->getAccountId();

    try {
      $config = new PrintConfiguration();
      $config->setFields($this->getRequest());
      $config->setAccountId($account_id);
      if ($config) {
        // generate preview
        $fs_preview_dir = sfConfig::get('sf_web_dir').DIRECTORY_SEPARATOR.'preview'.DIRECTORY_SEPARATOR;
        $source_filename = $fs_preview_dir.'sample.pdf';
        $output_filename = md5($account_id.'-'.time()).'.png';
        $output_filepath = $fs_preview_dir.$output_filename;

        // sample data
        $groups = array();
        $groups[] = WMGroup::getSampleData();

        $watermarker_parameter = new WatermarkerParameter();
        $watermarker_parameter->setSourceFilename($source_filename);
        $watermarker_parameter->setOutputFilename($output_filepath);
        $watermarker_parameter->setPrintConfig($config);
        $watermarker_parameter->setGroups($groups);
        $wm = WatermarkerFactory::getInstance();
        $wm->preview($watermarker_parameter);

        $response['success'] = true;
        $response['image_url'] = '/preview/'.$output_filename;
      } else {
        // no config
        $response['error_code'] = 1;
      }

    } catch (Exception $e) {
      // log and ignore
      $response['error_code'] = 2;
      sfLogger::getInstance()->err($e->getMessage());
    }

    $this->renderText(json_encode($response));
    return sfView::NONE;
  }

  public function executeGetWatermarkImage()
  {
    $user = $this->getUser()->getProfile();
    $name = $this->getRequestParameter('name');
    $wi = WatermarkImagePeer::findByName($name);
    $account_id = $user->getAccount()->getId();
    if ($wi && $account_id == $wi->getAccountId())
    {
      // open file and send stream
      $image = FileManager::getUploadDirectoryByAccount($account_id).DIRECTORY_SEPARATOR.$wi->getImageName();
      $filesize = filesize($image);
      header("Expires: Mon, 26 Nov 1962 00:00:00 GMT");
      header("Last-Modified: " . gmdate("D,d M Y H:i:s") . " GMT");
      header("Cache-Control: no-cache, must-revalidate");
      header("Pragma: no-cache");
      header("Content-type: ".$wi->getContentType());
      header("Content-length: " . $filesize);

      // This will work on all systems, but will need considerable resources
      // We could also loop with fread($fp, 4096) to save memory
      readfile($image);
    }

    return sfView::NONE;
  }

  public function executeUpload()
  {
    $request = $this->getRequest();
    $profile = $this->getUser()->getProfile();
    $result = true;

    // Flag for use in the template to decide whether to use JS code or not.
    $this->isUploaded = false;

    if ($request->getMethod() == sfRequest::POST)
    {
      try
      {
        $file = FileManager::uploadWatermarkImage($request, $profile);
        $this->isUploaded = !$file->isNew();
        $result = 'success';
      }
      catch (Exception $e)
      {
        // TODO: hook up with error reporting framework
        sfLogger::getInstance()->err("File upload failed: ".$e->getMessage());
        $result = false;
      }
    }

    $this->upload_result = $result;
    $this->setLayout(false);
    return sfView::SUCCESS;
  }

  public function handleErrorUpload()
  {
    $this->setLayout(false);
    return sfView::SUCCESS;
  }

  public function executeListWatermarkImage()
  {
    $user = $this->getUser()->getProfile();
    $this->print_configuration = PrintConfigurationPeer::getLatestByAccountId($user->getAccountId());
    if ($this->print_configuration == null) {
      $this->print_configuration = PrintConfiguration::getDefaultConfiguration();
    }
    $this->watermark_images = WatermarkImagePeer::findByAccountId($user->getAccountId());
    return sfView::SUCCESS;
  }

  public function executeDeleteWatermarkImage()
  {
    $request = $this->getRequest();
    $profile = $this->getUser()->getProfile();
    try
    {
      FileManager::deleteWatermarkImage($request, $profile->getAccountId());
    }
    catch (Exception $e)
    {
      $request->setError('deleteError', 'Error deleting file');
      $this->logMessage("File deletion failed: ".$e->getMessage(), 'err');
    }

    $this->forward('printconfiguration', 'listWatermarkImage');
  }

}
